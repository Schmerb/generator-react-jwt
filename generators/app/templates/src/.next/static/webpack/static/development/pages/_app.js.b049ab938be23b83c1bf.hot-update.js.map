{"version":3,"file":"static/webpack/static/development/pages/_app.js.b049ab938be23b83c1bf.hot-update.js","sources":["webpack:///./components/formik/ChangePasswordFormik.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport Button from 'components/atoms/Button';\nimport Checkbox from 'components/atoms/Checkbox';\n\nimport { flashSuccess, flashError } from 'actions/flashMessage';\nimport { login } from 'actions/auth';\nimport { updateUser } from 'actions/user';\n\nimport useClearTimeout from 'utils/hooks/useClearTimeout';\n\nconst errorStyles = {\n  color: 'red',\n  marginLeft: '7px',\n  marginTop: '7px',\n};\n\nconst renderField = (type, name, placeholder) => {\n  return (\n    <FieldWrapper>\n      <Field type={type} name={name} placeholder={placeholder} />\n      <ErrorMessage name={name} component=\"div\" style={errorStyles} />\n    </FieldWrapper>\n  );\n};\n\nconst ChangePasswordFormik = ({\n  dispatch,\n  router,\n  onRequestClose,\n  setLoading,\n  setLoadingText,\n  doneLoading,\n}) => {\n  const submitText = 'submitText';\n  let timeoutSubmit;\n  useClearTimeout(timeoutSubmit);\n  let timeoutReset;\n  useClearTimeout(timeoutReset);\n  return (\n    <FormikContainer>\n      <Formik\n        initialValues={{\n          password: '',\n          newPassword: '',\n          rePassword: '',\n          checkbox: false,\n        }}\n        validate={values => {\n          let errors = {};\n          if (!values.password) {\n            errors.password = 'Required';\n          } else if (!values.newPassword) {\n            errors.newPassword = 'Required';\n          } else if (values.newPassword.length < 8) {\n            errors.password = 'Password must be a minimum of 9 characters.';\n          } else if (!values.rePassword) {\n            errors.rePassword = 'Required';\n          } else if (values.newPassword !== values.rePassword) {\n            errors.rePassword = 'Passwords must match.';\n          }\n\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting, setFieldError, resetForm }) => {\n          setLoading(true);\n          setLoadingText('Updating password...');\n          timeoutSubmit = setTimeout(() => {\n            doneLoading();\n            const userCreds = {\n              password: values.password,\n              newPassword: values.newPassword,\n            };\n\n            dispatch(updateUser(userCreds))\n              .then(res => {\n                onRequestClose();\n                dispatch(flashSuccess('Successfully updated password!'));\n                timeoutReset = setTimeout(resetForm, 400);\n              })\n              .catch(error => {\n                console.log({ error });\n                dispatch(flashError());\n                if (error.status === 401) {\n                  dispatch(\n                    flashError(`${error.message} -- Password Incorrect.`),\n                  );\n                  setFieldError('server', 'Password Incorrect.');\n                }\n              });\n\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({ isSubmitting, errors, touched, submitCount }) => {\n          return (\n            <Form>\n              <Container>\n                <Flex>\n                  <InputsWrapper hasError={errors.server}>\n                    {renderField('password', 'password', 'Current Password')}\n                    {renderField('password', 'newPassword', 'New Password')}\n                    {renderField(\n                      'password',\n                      'rePassword',\n                      'Re-enter New Password',\n                    )}\n                  </InputsWrapper>\n                  {errors.server && <ServerError>{errors.server}</ServerError>}\n                </Flex>\n                <Controls>\n                  <BottomBtnWrapper>\n                    <Button\n                      width=\"100%\"\n                      style={{ borderRadius: '3px' }}\n                      onClick={onRequestClose}\n                    >\n                      Cancel\n                    </Button>\n                  </BottomBtnWrapper>\n                  <BottomBtnWrapper>\n                    <Button\n                      width=\"100%\"\n                      style={{ borderRadius: '3px' }}\n                      type=\"submit\"\n                      disabled={isSubmitting}\n                    >\n                      {submitText || 'Submit'}\n                    </Button>\n                  </BottomBtnWrapper>\n                </Controls>\n              </Container>\n            </Form>\n          );\n        }}\n      </Formik>\n    </FormikContainer>\n  );\n};\n\nChangePasswordFormik.propTypes = {\n  onRequestClose: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  router: PropTypes.object.isRequired,\n  doneLoading: PropTypes.func,\n  setLoading: PropTypes.func,\n  setLoadingText: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({});\nexport default withRouter(connect(mapStateToProps)(ChangePasswordFormik));\n\nconst FormikContainer = styled.div`\n  ${({ theme }) => theme.styles.grow};\n  text-align: left;\n\n  form {\n    ${({ theme }) => theme.styles.grow};\n  }\n`;\n\nconst Flex = styled.div`\n  ${({ theme }) => theme.styles.grow};\n`;\n\nconst Container = styled.div`\n  ${({ theme }) => theme.styles.grow};\n`;\n\nconst InputsWrapper = styled.div`\n  border-left: 5px solid transparent;\n  padding: 2px;\n  transition: border-color 0.3s;\n  ${({ hasError }) =>\n    hasError &&\n    css`\n      border-color: 'red';\n    `}\n`;\n\nconst ServerError = styled.div`\n  color: 'red';\n`;\n\nconst FieldWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  &:not(:first-of-type) {\n    margin-top: 15px;\n  }\n  input {\n    font-size: 1rem;\n    line-height: 1.5rem;\n    /* margin-bottom: 5px; */\n    padding-left: 0.4rem;\n\n    &::placeholder {\n      opacity: 0.4;\n    }\n  }\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  margin-top: 10px;\n  @media screen and (min-width: 600px) {\n    flex-direction: row;\n  }\n`;\n\nconst BottomBtnWrapper = styled.div`\n  width: 49%;\n\n  @media screen and (max-width: 599px) {\n    margin-top: 15px;\n  }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AApDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}